(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-color')) :
    typeof define === 'function' && define.amd ? define('ngx-color/github', ['exports', '@angular/common', '@angular/core', 'ngx-color'], factory) :
    (global = global || self, factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].github = {}), global.ng.common, global.ng.core, global['ngx-color']));
}(this, function (exports, common, core, ngxColor) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var GithubSwatchComponent = /** @class */ (function () {
        function GithubSwatchComponent() {
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
        }
        GithubSwatchComponent.prototype.handleClick = function (_a) {
            var hex = _a.hex, $event = _a.$event;
            this.onClick.emit({ hex: hex, $event: $event });
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], GithubSwatchComponent.prototype, "color", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GithubSwatchComponent.prototype, "onClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], GithubSwatchComponent.prototype, "onSwatchHover", void 0);
        GithubSwatchComponent = __decorate([
            core.Component({
                selector: 'color-github-swatch',
                template: "\n  <div class=\"github-swatch\">\n    <color-swatch\n      [color]=\"color\"\n      [style]=\"swatchStyle\"\n      (onClick)=\"handleClick($event)\"\n      (onHover)=\"onSwatchHover.emit($event)\"\n      class=\"swatch\"\n    ></color-swatch>\n    <div class=\"clear\"></div>\n  </div>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: ["\n    .github-swatch {\n      width: 25px;\n      height: 25px;\n      font-size: 0;\n    }\n    .github-swatch:hover {\n      position: relative;\n      z-index: 2;\n      outline: 2px solid #fff;\n      box-shadow: 0 0 5px 2px rgba(0,0,0,0.25);\n    }\n  "]
            }),
            __metadata("design:paramtypes", [])
        ], GithubSwatchComponent);
        return GithubSwatchComponent;
    }());

    var GithubComponent = /** @class */ (function (_super) {
        __extends(GithubComponent, _super);
        function GithubComponent() {
            var _this = _super.call(this) || this;
            /** Pixel value for picker width */
            _this.width = 212;
            /** Color squares to display */
            _this.colors = [
                '#B80000',
                '#DB3E00',
                '#FCCB00',
                '#008B02',
                '#006B76',
                '#1273DE',
                '#004DCF',
                '#5300EB',
                '#EB9694',
                '#FAD0C3',
                '#FEF3BD',
                '#C1E1C5',
                '#BEDADC',
                '#C4DEF6',
                '#BED3F3',
                '#D4C4FB',
            ];
            _this.triangle = 'top-left';
            return _this;
        }
        GithubComponent.prototype.handleBlockChange = function (_a) {
            var hex = _a.hex, $event = _a.$event;
            if (ngxColor.isValidHex(hex)) {
                this.handleChange({ hex: hex, source: 'hex' }, $event);
            }
        };
        GithubComponent.prototype.handleValueChange = function (_a) {
            var data = _a.data, $event = _a.$event;
            this.handleChange(data, $event);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], GithubComponent.prototype, "width", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], GithubComponent.prototype, "colors", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], GithubComponent.prototype, "triangle", void 0);
        GithubComponent = __decorate([
            core.Component({
                selector: 'color-github',
                template: "\n  <div class=\"github-picker {{ triangle }}-triangle {{ className }}\"\n    [style.width.px]=\"width\"\n  >\n    <div class=\"triangleShadow\"></div>\n    <div class=\"triangle\"></div>\n    <color-github-swatch *ngFor=\"let color of colors\"\n      [color]=\"color\"\n      (onClick)=\"handleBlockChange($event)\"\n      (onSwatchHover)=\"onSwatchHover.emit($event)\"\n    ></color-github-swatch>\n  </div>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: ["\n  .github-picker {\n    background: rgb(255, 255, 255);\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 3px 12px;\n    border-radius: 4px;\n    position: relative;\n    padding: 5px;\n    display: flex;\n    flex-wrap: wrap;\n    box-sizing: border-box;\n  }\n  .triangleShadow {\n    position: absolute;\n    border-width: 8px;\n    border-style: solid;\n    border-color: transparent transparent rgba(0, 0, 0, 0.15);\n    border-image: initial;\n  }\n  .triangle {\n    position: absolute;\n    border-width: 7px;\n    border-style: solid;\n    border-color: transparent transparent rgb(255, 255, 255);\n    border-image: initial;\n  }\n  .hide-triangle > .triangle {\n    display: none;\n  }\n  .hide-triangle > .triangleShadow {\n    display: none;\n  }\n  .top-left-triangle > .triangle {\n    top: -14px;\n    left: 10px;\n  }\n  .top-left-triangle > .triangleShadow {\n    top: -16px;\n    left: 9px;\n  }\n  .top-right-triangle > .triangle {\n    top: -14px;\n    right: 10px;\n  }\n  .top-right-triangle > .triangleShadow {\n    top: -16px;\n    right: 9px;\n  }\n  .bottom-right-triangle > .triangle {\n    top: 35px;\n    right: 10px;\n    transform: rotate(180deg);\n  }\n  .bottom-right-triangle > .triangleShadow {\n    top: 37px;\n    right: 9px;\n    transform: rotate(180deg);\n  }\n  "]
            }),
            __metadata("design:paramtypes", [])
        ], GithubComponent);
        return GithubComponent;
    }(ngxColor.ColorWrap));
    var ColorGithubModule = /** @class */ (function () {
        function ColorGithubModule() {
        }
        ColorGithubModule = __decorate([
            core.NgModule({
                declarations: [GithubComponent, GithubSwatchComponent],
                exports: [GithubComponent, GithubSwatchComponent],
                imports: [common.CommonModule, ngxColor.SwatchModule],
            })
        ], ColorGithubModule);
        return ColorGithubModule;
    }());

    exports.ColorGithubModule = ColorGithubModule;
    exports.GithubComponent = GithubComponent;
    exports.Éµa = GithubSwatchComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-color-github.umd.js.map
