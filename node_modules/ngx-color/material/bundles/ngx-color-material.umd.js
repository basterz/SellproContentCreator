(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-color')) :
    typeof define === 'function' && define.amd ? define('ngx-color/material', ['exports', '@angular/common', '@angular/core', 'ngx-color'], factory) :
    (global = global || self, factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].material = {}), global.ng.common, global.ng.core, global['ngx-color']));
}(this, function (exports, common, core, ngxColor) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var MaterialComponent = /** @class */ (function (_super) {
        __extends(MaterialComponent, _super);
        function MaterialComponent() {
            var _this = _super.call(this) || this;
            _this.HEXinput = {
                width: '100%',
                marginTop: '12px',
                fontSize: '15px',
                color: 'rgb(51, 51, 51)',
                padding: '0px',
                'border-width': '0px 0px 2px',
                outline: 'none',
                height: '30px',
            };
            _this.HEXlabel = {
                position: 'absolute',
                top: '0px',
                left: '0px',
                fontSize: '11px',
                color: 'rgb(153, 153, 153)',
                'text-transform': 'capitalize',
            };
            _this.RGBinput = {
                width: '100%',
                marginTop: '12px',
                fontSize: '15px',
                color: '#333',
                padding: '0px',
                border: '0px',
                'border-bottom': '1px solid #eee',
                outline: 'none',
                height: '30px',
            };
            _this.RGBlabel = {
                position: 'absolute',
                top: '0px',
                left: '0px',
                fontSize: '11px',
                color: '#999999',
                'text-transform': 'capitalize',
            };
            return _this;
        }
        MaterialComponent.prototype.handleValueChange = function (_a) {
            var data = _a.data, $event = _a.$event;
            this.handleChange(data, $event);
        };
        MaterialComponent.prototype.handleInputChange = function (_a) {
            var data = _a.data, $event = _a.$event;
            if (data.hex) {
                if (ngxColor.isValidHex(data.hex)) {
                    this.handleValueChange({
                        data: {
                            hex: data.hex,
                            source: 'hex',
                        },
                        $event: $event,
                    });
                }
            }
            else if (data.r || data.g || data.b) {
                this.handleValueChange({
                    data: {
                        r: data.r || this.rgb.r,
                        g: data.g || this.rgb.g,
                        b: data.b || this.rgb.b,
                        source: 'rgb',
                    },
                    $event: $event,
                });
            }
        };
        MaterialComponent.prototype.afterValidChange = function () {
            this.HEXinput['border-bottom-color'] = this.hex;
        };
        MaterialComponent = __decorate([
            core.Component({
                selector: 'color-material',
                template: "\n  <color-raised>\n    <div class=\"material-picker {{ className }}\">\n      <color-editable-input label=\"hex\" [value]=\"hex\"\n        (onChange)=\"handleValueChange($event)\"\n        [style]=\"{input: HEXinput, label: HEXlabel}\"\n      ></color-editable-input>\n      <div class=\"material-split\">\n        <div class=\"material-third\">\n          <color-editable-input label=\"r\" [value]=\"rgb.r\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n        <div class=\"material-third\">\n          <color-editable-input label=\"g\" [value]=\"rgb.g\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n        <div class=\"material-third\">\n          <color-editable-input label=\"b\" [value]=\"rgb.b\"\n            [style]=\"{ input: RGBinput, label: RGBlabel }\"\n            (onChange)=\"handleInputChange($event)\"\n          ></color-editable-input>\n        </div>\n      </div>\n    </div>\n  </color-raised>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                styles: ["\n  .material-picker {\n    width: 130px;\n    height: 130px;\n    padding: 16px;\n    font-family: Roboto;\n  }\n  .material-split {\n    display: flex;\n    margin-right: -10px;\n    padding-top: 11px;\n  }\n  .material-third {\n    flex: 1 1 0%;\n    padding-right: 10px;\n  }\n  "]
            }),
            __metadata("design:paramtypes", [])
        ], MaterialComponent);
        return MaterialComponent;
    }(ngxColor.ColorWrap));
    var ColorMaterialModule = /** @class */ (function () {
        function ColorMaterialModule() {
        }
        ColorMaterialModule = __decorate([
            core.NgModule({
                exports: [MaterialComponent],
                declarations: [MaterialComponent],
                imports: [common.CommonModule, ngxColor.EditableInputModule, ngxColor.RaisedModule],
            })
        ], ColorMaterialModule);
        return ColorMaterialModule;
    }());

    exports.ColorMaterialModule = ColorMaterialModule;
    exports.MaterialComponent = MaterialComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-color-material.umd.js.map
