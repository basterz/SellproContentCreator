(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('ngx-color')) :
    typeof define === 'function' && define.amd ? define('ngx-color/block', ['exports', '@angular/common', '@angular/core', 'ngx-color'], factory) :
    (global = global || self, factory((global['ngx-color'] = global['ngx-color'] || {}, global['ngx-color'].block = {}), global.ng.common, global.ng.core, global['ngx-color']));
}(this, function (exports, common, core, ngxColor) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var BlockSwatchesComponent = /** @class */ (function () {
        function BlockSwatchesComponent() {
            this.onClick = new core.EventEmitter();
            this.onSwatchHover = new core.EventEmitter();
        }
        BlockSwatchesComponent.prototype.ngOnInit = function () {
            this.swatchStyle = {
                width: '22px',
                height: '22px',
                float: 'left',
                marginRight: '10px',
                marginBottom: '10px',
                borderRadius: '4px',
            };
        };
        BlockSwatchesComponent.prototype.handleClick = function (_a) {
            var hex = _a.hex, $event = _a.$event;
            this.onClick.emit({ hex: hex, $event: $event });
        };
        BlockSwatchesComponent.prototype.focusStyle = function (c) {
            return {
                boxShadow: c + " 0 0 4px",
            };
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], BlockSwatchesComponent.prototype, "colors", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], BlockSwatchesComponent.prototype, "onClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], BlockSwatchesComponent.prototype, "onSwatchHover", void 0);
        BlockSwatchesComponent = __decorate([
            core.Component({
                selector: 'color-block-swatches',
                template: "\n    <div class=\"block-swatches\">\n      <color-swatch\n        *ngFor=\"let c of colors\"\n        [color]=\"c\"\n        [style]=\"swatchStyle\"\n        [focusStyle]=\"focusStyle(c)\"\n        (onClick)=\"handleClick($event)\"\n        (onHover)=\"onSwatchHover.emit($event)\"\n      ></color-swatch>\n      <div class=\"clear\"></div>\n    </div>\n  ",
                styles: ["\n    .block-swatches {\n      margin-right: -10px;\n    }\n    .clear {\n      clear: both;\n    }\n  "]
            }),
            __metadata("design:paramtypes", [])
        ], BlockSwatchesComponent);
        return BlockSwatchesComponent;
    }());

    var BlockComponent = /** @class */ (function (_super) {
        __extends(BlockComponent, _super);
        function BlockComponent() {
            var _this = _super.call(this) || this;
            /** Pixel value for picker width */
            _this.width = 170;
            /** Color squares to display */
            _this.colors = [
                '#D9E3F0',
                '#F47373',
                '#697689',
                '#37D67A',
                '#2CCCE4',
                '#555555',
                '#dce775',
                '#ff8a65',
                '#ba68c8',
            ];
            _this.triangle = 'top';
            _this.input = {
                width: '100%',
                fontSize: '12px',
                color: '#666',
                border: '0px',
                outline: 'none',
                height: '22px',
                boxShadow: 'inset 0 0 0 1px #ddd',
                borderRadius: '4px',
                padding: '0 7px',
                boxSizing: 'border-box',
            };
            _this.wrap = {
                position: 'relative',
                width: '100%',
            };
            return _this;
        }
        BlockComponent.prototype.handleValueChange = function (_a) {
            var data = _a.data, $event = _a.$event;
            this.handleBlockChange({ hex: data, $event: $event });
        };
        BlockComponent.prototype.getContrastingColor = function (hex) {
            return ngxColor.getContrastingColor(hex);
        };
        BlockComponent.prototype.handleBlockChange = function (_a) {
            var hex = _a.hex, $event = _a.$event;
            if (ngxColor.isValidHex(hex)) {
                // this.hex = hex;
                this.handleChange({
                    hex: hex,
                    source: 'hex',
                }, $event);
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], BlockComponent.prototype, "width", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], BlockComponent.prototype, "colors", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], BlockComponent.prototype, "triangle", void 0);
        BlockComponent = __decorate([
            core.Component({
                selector: 'color-block',
                template: "\n  <div class=\"block-card block-picker {{ className }}\">\n    <div class=\"block-triangle\" *ngIf=\"triangle !== 'hide'\"\n      [style.border-color]=\"'transparent transparent ' + this.hex + ' transparent'\"\n    ></div>\n\n    <div class=\"block-head\" [style.background]=\"hex\">\n      <color-checkboard *ngIf=\"hex === 'transparent'\"\n        borderRadius=\"6px 6px 0 0\"\n      ></color-checkboard>\n      <div class=\"block-label\" [style.color]=\"getContrastingColor(hex)\">\n        {{ hex }}\n      </div>\n    </div>\n\n    <div class=\"block-body\">\n      <color-block-swatches [colors]=\"colors\"\n        (onClick)=\"handleBlockChange($event)\"\n        (onSwatchHover)=\"onSwatchHover.emit($event)\"\n      ></color-block-swatches>\n      <color-editable-input [value]=\"hex\"\n        (onChange)=\"handleValueChange($event)\"\n        [style]=\"{input: input, wrap: wrap}\"\n      ></color-editable-input>\n    </div>\n  </div>\n  ",
                preserveWhitespaces: false,
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                styles: ["\n    .block-card {\n      background: #fff;\n      border-radius: 6px;\n      box-shadow: 0 1px rgba(0, 0, 0, .1);\n      position: relative;\n    }\n    .block-head {\n      align-items: center;\n      border-radius: 6px 6px 0 0;\n      display: flex;\n      height: 110px;\n      justify-content: center;\n      position: relative;\n    }\n    .block-body {\n      padding: 10px;\n    }\n    .block-label {\n      font-size: 18px;\n      position: relative;\n    }\n    .block-triangle {\n      border-style: solid;\n      border-width: 0 10px 10px 10px;\n      height: 0;\n      left: 50%;\n      margin-left: -10px;\n      position: absolute;\n      top: -10px;\n      width: 0;\n    }\n  "]
            }),
            __metadata("design:paramtypes", [])
        ], BlockComponent);
        return BlockComponent;
    }(ngxColor.ColorWrap));
    var ColorBlockModule = /** @class */ (function () {
        function ColorBlockModule() {
        }
        ColorBlockModule = __decorate([
            core.NgModule({
                declarations: [BlockComponent, BlockSwatchesComponent],
                exports: [BlockComponent, BlockSwatchesComponent],
                imports: [common.CommonModule, ngxColor.CheckboardModule, ngxColor.SwatchModule, ngxColor.EditableInputModule],
            })
        ], ColorBlockModule);
        return ColorBlockModule;
    }());

    exports.BlockComponent = BlockComponent;
    exports.ColorBlockModule = ColorBlockModule;
    exports.Éµa = BlockSwatchesComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-color-block.umd.js.map
