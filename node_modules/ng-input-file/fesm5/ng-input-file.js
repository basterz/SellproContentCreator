import { __awaiter, __generator } from 'tslib';
import { Injectable, isDevMode, Component, Input, Output, ViewChild, EventEmitter, NgModule } from '@angular/core';
import { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatButtonModule, MatInputModule } from '@angular/material';
import { MatIconModule } from '@angular/material/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var GOOGLE_API_URL = 'https://apis.google.com/js/api.js?onload=loadPicker';
/** @type {?} */
var SCOPE = ['https://www.googleapis.com/auth/drive'];
var GoogleDriveService = /** @class */ (function () {
    function GoogleDriveService(http) {
        var _this = this;
        this.http = http;
        this.isDevMode = isDevMode();
        this.file$ = new Subject();
        this.selectedFile = this.file$.asObservable();
        this.pickerApiLoaded = false;
        this.googleApiUrl = GOOGLE_API_URL;
        this.googleApiLoaded = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        function (s) {
            var optional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optional[_i - 1] = arguments[_i];
            }
            return s && _this.isDevMode && console.log(s, optional);
        });
        this.log("'google-drive.service'");
        this.onAuthApiLoad = this.onAuthApiLoad.bind(this);
        this.onPickerApiLoad = this.onPickerApiLoad.bind(this);
        this.handleAuthResult = this.handleAuthResult.bind(this);
        this.pickerCallback = this.pickerCallback.bind(this);
    }
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.setDevMode = /**
     * @return {?}
     */
    function () { this.isDevMode = true; };
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} config
     * @return {?}
     */
    GoogleDriveService.prototype.init = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.config = config;
    };
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.config)
            return;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (_this.googleApiLoaded) {
                resolve('already loaded');
                return;
            }
            /** @type {?} */
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = _this.googleApiUrl;
            script.onload = (/**
             * @return {?}
             */
            function () {
                _this.googleApiLoaded = true;
                resolve('loaded');
            });
            script.onerror = ((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return resolve('failed to load'); }));
            document.getElementsByTagName('head')[0].appendChild(script);
        }));
    };
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.loadPicker = /**
     * @return {?}
     */
    function () {
        if (!this.config)
            return;
        this.pickerApiLoaded = false;
        this.oauthToken = null;
        this.doLoadPicker();
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.doLoadPicker = /**
     * @private
     * @return {?}
     */
    function () {
        gapi.load('auth', { 'callback': this.onAuthApiLoad });
        gapi.load('picker', { 'callback': this.onPickerApiLoad });
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.onAuthApiLoad = /**
     * @private
     * @return {?}
     */
    function () {
        gapi.auth.authorize({
            'client_id': this.config.clientId,
            'scope': SCOPE,
            'immediate': false
        }, this.handleAuthResult);
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.onPickerApiLoad = /**
     * @private
     * @return {?}
     */
    function () {
        this.pickerApiLoaded = true;
        this.createPicker();
    };
    /**
     * @private
     * @param {?} authResult
     * @return {?}
     */
    GoogleDriveService.prototype.handleAuthResult = /**
     * @private
     * @param {?} authResult
     * @return {?}
     */
    function (authResult) {
        if (authResult && !authResult.error) {
            this.oauthToken = authResult.access_token;
            this.createPicker();
            this.log('handleAuthResult', authResult);
        }
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.createPicker = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.pickerApiLoaded && this.oauthToken) {
            /** @type {?} */
            var origin = window.location.protocol + '//' + window.location.host;
            this.log("createPicker origin '" + origin + "'");
            /** @type {?} */
            var view = new google.picker.View(google.picker.ViewId.DOCS);
            view.setMimeTypes('image/png,image/jpeg,image/jpg');
            /** @type {?} */
            var picker = new google.picker.PickerBuilder()
                .enableFeature(google.picker.Feature.NAV_HIDDEN)
                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                .setAppId(this.config.appId)
                .setOAuthToken(this.oauthToken)
                .setOrigin(origin)
                .addView(view)
                .addView(new google.picker.DocsUploadView())
                // .setDeveloperKey(developerKey)
                .setCallback(this.pickerCallback)
                .build();
            picker.setVisible(true);
        }
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    GoogleDriveService.prototype.pickerCallback = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var doc_1, fileId, accessToken, file_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(data.action == google.picker.Action.PICKED)) return [3 /*break*/, 2];
                        doc_1 = data.docs[0];
                        fileId = doc_1.id;
                        accessToken = gapi.auth.getToken().access_token;
                        this.log('The user selected', fileId, accessToken, doc_1);
                        return [4 /*yield*/, this.getFile(fileId, accessToken).pipe(take(1))
                                .forEach((/**
                             * @param {?} blob
                             * @return {?}
                             */
                            function (blob) {
                                file_1 = new File([blob], doc_1.name, { type: blob.type });
                                _this.file$.next(file_1);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} fileId
     * @param {?} accessToken
     * @return {?}
     */
    GoogleDriveService.prototype.getFile = /**
     * @private
     * @param {?} fileId
     * @param {?} accessToken
     * @return {?}
     */
    function (fileId, accessToken) {
        /** @type {?} */
        var url = "https://www.googleapis.com/drive/v3/files/" + fileId + "?alt=media";
        return this.http.get(url, {
            headers: new HttpHeaders({
                'Authorization': "Bearer " + accessToken
            }),
            responseType: 'blob'
        });
    };
    GoogleDriveService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GoogleDriveService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return GoogleDriveService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NO_FILE = '';
/** @type {?} */
var ACCEPT_DEFAULT = 'image/*, video/*';
var NgInputFileComponent = /** @class */ (function () {
    function NgInputFileComponent(service) {
        var _this = this;
        this.service = service;
        this.file = new FormControl({ value: NO_FILE, disabled: true });
        this.accept = ACCEPT_DEFAULT;
        this.files = new EventEmitter();
        this.service.selectedFile.subscribe((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return _this.googleFileChanged(file); }));
        this.drop = this.drop.bind(this);
        this.fileDropped = this.fileDropped.bind(this);
    }
    Object.defineProperty(NgInputFileComponent.prototype, "filename", {
        get: /**
         * @return {?}
         */
        function () { return this.file.value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this.file.setValue(value); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgInputFileComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.dropbox) {
            this.dropbox.addEventListener('dragenter', this.dragenter, false);
            this.dropbox.addEventListener('dragover', this.dragover, false);
            this.dropbox.addEventListener('drop', this.drop, false);
        }
        this.service.log('NgInputFileComponent', this.dropbox);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    NgInputFileComponent.prototype.dragenter = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        e.preventDefault();
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    NgInputFileComponent.prototype.dragover = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        e.preventDefault();
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    NgInputFileComponent.prototype.drop = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        e.preventDefault();
        /** @type {?} */
        var dt = e.dataTransfer;
        /** @type {?} */
        var files = dt.files;
        this.fileDropped(files);
    };
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    NgInputFileComponent.prototype.fileDropped = /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (!files || files.length === 0)
            return;
        /** @type {?} */
        var file = files.item(0);
        this.service.log("fileDropped '" + file.name + "'", file);
        if (this.filename === file.name)
            return;
        // got new file drag-and-dropped from local device
        this.filename = file.name;
        this.googleFile = null;
        this.emitFiles(files);
    };
    /**
     * @return {?}
     */
    NgInputFileComponent.prototype.fileChanged = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filename = NO_FILE;
        if (this.getFiles().length > 0) {
            /** @type {?} */
            var file = this.getFiles().item(0);
            if (file)
                filename = file.name;
        }
        if (this.filename === filename)
            return;
        // got new file chosen from local device
        this.filename = filename;
        this.googleFile = null;
        this.emitFiles();
    };
    /**
     * @param {?} file
     * @return {?}
     */
    NgInputFileComponent.prototype.googleFileChanged = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.service.log("googleFileChanged '" + file.name + "'", file);
        if (this.googleFile &&
            this.googleFile.name === file.name &&
            this.googleFile.size === file.size)
            return;
        // got new file from google drive
        this.filename = file.name;
        this.googleFile = file;
        this.emitFiles();
    };
    /**
     * @return {?}
     */
    NgInputFileComponent.prototype.googleDrivePick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.service.loadScript()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.service.loadPicker(); }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return console.error('googleDrivePick', error); }));
    };
    /**
     * @return {?}
     */
    NgInputFileComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.getFileInput().value = NO_FILE;
        this.googleFile = null;
        this.filename = NO_FILE;
    };
    /**
     * @return {?}
     */
    NgInputFileComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        this.clear();
        this.emitFiles();
    };
    /**
     * @private
     * @param {?=} droppedFiles
     * @return {?}
     */
    NgInputFileComponent.prototype.emitFiles = /**
     * @private
     * @param {?=} droppedFiles
     * @return {?}
     */
    function (droppedFiles) {
        /** @type {?} */
        var files = droppedFiles || (this.googleFile ? [this.googleFile] : this.getFiles());
        this.files.emit({ files: files });
    };
    /**
     * @private
     * @return {?}
     */
    NgInputFileComponent.prototype.getFileInput = /**
     * @private
     * @return {?}
     */
    function () {
        return this.inputEl.nativeElement;
    };
    /**
     * @private
     * @return {?}
     */
    NgInputFileComponent.prototype.getFiles = /**
     * @private
     * @return {?}
     */
    function () {
        return this.getFileInput().files;
    };
    NgInputFileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-file',
                    template: "\n<div class=\"box\">\n  <div class=\"input-file\" style=\"width:93%\">\n    <mat-form-field style=\"width:100%\" (click)=\"inputEl.click()\">\n      <i matPrefix>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z\"/><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/></svg>\n      </i>\n      <input matInput placeholder=\"Choose file\" [formControl]=\"file\">\n    </mat-form-field>\n    <input type=\"file\" [attr.accept]=\"accept\" (change)=\"fileChanged()\" #inputEl>\n  </div>\n  <i class=\"icon\" *ngIf=\"service.config\" (click)=\"googleDrivePick()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 48 48\" version=\"1.1\" width=\"24px\" height=\"24px\"><g id=\"surface1\"><path style=\" fill:#FFC107;\" d=\"M 17 6 L 31 6 L 45 30 L 31 30 Z \"/><path style=\" fill:#1976D2;\" d=\"M 9.875 42 L 16.9375 30 L 45 30 L 38 42 Z \"/><path style=\" fill:#4CAF50;\" d=\"M 3 30.125 L 9.875 42 L 24 18 L 17 6 Z \"/></g></svg>\n  </i>\n  <i class=\"icon\" *ngIf=\"filename\" (click)=\"remove()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4z\"/><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/></svg>\n  </i>\n</div>\n  ",
                    styles: ["\n.box {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\nmat-form-field, i.icon {\n  cursor: pointer;\n}\ninput[type=file] {\n  display: none;\n}\ni[matPrefix] {\n  padding-right: 5px;\n}\ni.icon {\n  padding-bottom: 12px;\n}\n  "]
                }] }
    ];
    /** @nocollapse */
    NgInputFileComponent.ctorParameters = function () { return [
        { type: GoogleDriveService }
    ]; };
    NgInputFileComponent.propDecorators = {
        accept: [{ type: Input }],
        files: [{ type: Output }],
        inputEl: [{ type: ViewChild, args: ['inputEl',] }],
        dropbox: [{ type: Input }]
    };
    return NgInputFileComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgInputFileModule = /** @class */ (function () {
    function NgInputFileModule() {
    }
    NgInputFileModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule,
                        ReactiveFormsModule,
                        MatButtonModule,
                        MatInputModule,
                        MatIconModule,
                    ],
                    providers: [GoogleDriveService],
                    declarations: [NgInputFileComponent],
                    exports: [NgInputFileComponent]
                },] }
    ];
    return NgInputFileModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { GoogleDriveService, NgInputFileComponent, NgInputFileModule };
//# sourceMappingURL=ng-input-file.js.map
