/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { GoogleDriveService } from './google-drive.service';
/** @type {?} */
const NO_FILE = '';
/** @type {?} */
const ACCEPT_DEFAULT = 'image/*, video/*';
export class NgInputFileComponent {
    // nativeElement
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.file = new FormControl({ value: NO_FILE, disabled: true });
        this.accept = ACCEPT_DEFAULT;
        this.files = new EventEmitter();
        this.service.selectedFile.subscribe((/**
         * @param {?} file
         * @return {?}
         */
        file => this.googleFileChanged(file)));
        this.drop = this.drop.bind(this);
        this.fileDropped = this.fileDropped.bind(this);
    }
    /**
     * @return {?}
     */
    get filename() { return this.file.value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set filename(value) { this.file.setValue(value); }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dropbox) {
            this.dropbox.addEventListener('dragenter', this.dragenter, false);
            this.dropbox.addEventListener('dragover', this.dragover, false);
            this.dropbox.addEventListener('drop', this.drop, false);
        }
        this.service.log('NgInputFileComponent', this.dropbox);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    dragenter(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    dragover(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    drop(e) {
        e.stopPropagation();
        e.preventDefault();
        /** @type {?} */
        var dt = e.dataTransfer;
        /** @type {?} */
        var files = dt.files;
        this.fileDropped(files);
    }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    fileDropped(files) {
        if (!files || files.length === 0)
            return;
        /** @type {?} */
        const file = files.item(0);
        this.service.log(`fileDropped '${file.name}'`, file);
        if (this.filename === file.name)
            return;
        // got new file drag-and-dropped from local device
        this.filename = file.name;
        this.googleFile = null;
        this.emitFiles(files);
    }
    /**
     * @return {?}
     */
    fileChanged() {
        /** @type {?} */
        let filename = NO_FILE;
        if (this.getFiles().length > 0) {
            /** @type {?} */
            const file = this.getFiles().item(0);
            if (file)
                filename = file.name;
        }
        if (this.filename === filename)
            return;
        // got new file chosen from local device
        this.filename = filename;
        this.googleFile = null;
        this.emitFiles();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    googleFileChanged(file) {
        this.service.log(`googleFileChanged '${file.name}'`, file);
        if (this.googleFile &&
            this.googleFile.name === file.name &&
            this.googleFile.size === file.size)
            return;
        // got new file from google drive
        this.filename = file.name;
        this.googleFile = file;
        this.emitFiles();
    }
    /**
     * @return {?}
     */
    googleDrivePick() {
        this.service.loadScript()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => this.service.loadPicker()))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => console.error('googleDrivePick', error)));
    }
    /**
     * @return {?}
     */
    clear() {
        this.getFileInput().value = NO_FILE;
        this.googleFile = null;
        this.filename = NO_FILE;
    }
    /**
     * @return {?}
     */
    remove() {
        this.clear();
        this.emitFiles();
    }
    /**
     * @private
     * @param {?=} droppedFiles
     * @return {?}
     */
    emitFiles(droppedFiles) {
        /** @type {?} */
        const files = droppedFiles || (this.googleFile ? [this.googleFile] : this.getFiles());
        this.files.emit({ files: files });
    }
    /**
     * @private
     * @return {?}
     */
    getFileInput() {
        return this.inputEl.nativeElement;
    }
    /**
     * @private
     * @return {?}
     */
    getFiles() {
        return this.getFileInput().files;
    }
}
NgInputFileComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-file',
                template: `
<div class="box">
  <div class="input-file" style="width:93%">
    <mat-form-field style="width:100%" (click)="inputEl.click()">
      <i matPrefix>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"/><path fill="none" d="M0 0h24v24H0V0z"/></svg>
      </i>
      <input matInput placeholder="Choose file" [formControl]="file">
    </mat-form-field>
    <input type="file" [attr.accept]="accept" (change)="fileChanged()" #inputEl>
  </div>
  <i class="icon" *ngIf="service.config" (click)="googleDrivePick()">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 48 48" version="1.1" width="24px" height="24px"><g id="surface1"><path style=" fill:#FFC107;" d="M 17 6 L 31 6 L 45 30 L 31 30 Z "/><path style=" fill:#1976D2;" d="M 9.875 42 L 16.9375 30 L 45 30 L 38 42 Z "/><path style=" fill:#4CAF50;" d="M 3 30.125 L 9.875 42 L 24 18 L 17 6 Z "/></g></svg>
  </i>
  <i class="icon" *ngIf="filename" (click)="remove()">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4z"/><path fill="none" d="M0 0h24v24H0V0z"/></svg>
  </i>
</div>
  `,
                styles: [`
.box {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
mat-form-field, i.icon {
  cursor: pointer;
}
input[type=file] {
  display: none;
}
i[matPrefix] {
  padding-right: 5px;
}
i.icon {
  padding-bottom: 12px;
}
  `]
            }] }
];
/** @nocollapse */
NgInputFileComponent.ctorParameters = () => [
    { type: GoogleDriveService }
];
NgInputFileComponent.propDecorators = {
    accept: [{ type: Input }],
    files: [{ type: Output }],
    inputEl: [{ type: ViewChild, args: ['inputEl',] }],
    dropbox: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgInputFileComponent.prototype.file;
    /** @type {?} */
    NgInputFileComponent.prototype.accept;
    /** @type {?} */
    NgInputFileComponent.prototype.files;
    /**
     * @type {?}
     * @private
     */
    NgInputFileComponent.prototype.inputEl;
    /**
     * @type {?}
     * @private
     */
    NgInputFileComponent.prototype.googleFile;
    /** @type {?} */
    NgInputFileComponent.prototype.dropbox;
    /** @type {?} */
    NgInputFileComponent.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,