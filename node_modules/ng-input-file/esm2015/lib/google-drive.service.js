/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
/**
 * @record
 */
export function GoogleApiConfig() { }
if (false) {
    /** @type {?} */
    GoogleApiConfig.prototype.developerKey;
    /** @type {?} */
    GoogleApiConfig.prototype.appId;
    /** @type {?} */
    GoogleApiConfig.prototype.clientId;
}
/** @type {?} */
const GOOGLE_API_URL = 'https://apis.google.com/js/api.js?onload=loadPicker';
/** @type {?} */
const SCOPE = ['https://www.googleapis.com/auth/drive'];
export class GoogleDriveService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.isDevMode = isDevMode();
        this.file$ = new Subject();
        this.selectedFile = this.file$.asObservable();
        this.pickerApiLoaded = false;
        this.googleApiUrl = GOOGLE_API_URL;
        this.googleApiLoaded = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        (s, ...optional) => s && this.isDevMode && console.log(s, optional));
        this.log(`'google-drive.service'`);
        this.onAuthApiLoad = this.onAuthApiLoad.bind(this);
        this.onPickerApiLoad = this.onPickerApiLoad.bind(this);
        this.handleAuthResult = this.handleAuthResult.bind(this);
        this.pickerCallback = this.pickerCallback.bind(this);
    }
    /**
     * @return {?}
     */
    setDevMode() { this.isDevMode = true; }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    init(config) {
        this.config = config;
    }
    /**
     * @return {?}
     */
    loadScript() {
        if (!this.config)
            return;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this.googleApiLoaded) {
                resolve('already loaded');
                return;
            }
            /** @type {?} */
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = this.googleApiUrl;
            script.onload = (/**
             * @return {?}
             */
            () => {
                this.googleApiLoaded = true;
                resolve('loaded');
            });
            script.onerror = ((/**
             * @param {?} error
             * @return {?}
             */
            error => resolve('failed to load')));
            document.getElementsByTagName('head')[0].appendChild(script);
        }));
    }
    /**
     * @return {?}
     */
    loadPicker() {
        if (!this.config)
            return;
        this.pickerApiLoaded = false;
        this.oauthToken = null;
        this.doLoadPicker();
    }
    /**
     * @private
     * @return {?}
     */
    doLoadPicker() {
        gapi.load('auth', { 'callback': this.onAuthApiLoad });
        gapi.load('picker', { 'callback': this.onPickerApiLoad });
    }
    /**
     * @private
     * @return {?}
     */
    onAuthApiLoad() {
        gapi.auth.authorize({
            'client_id': this.config.clientId,
            'scope': SCOPE,
            'immediate': false
        }, this.handleAuthResult);
    }
    /**
     * @private
     * @return {?}
     */
    onPickerApiLoad() {
        this.pickerApiLoaded = true;
        this.createPicker();
    }
    /**
     * @private
     * @param {?} authResult
     * @return {?}
     */
    handleAuthResult(authResult) {
        if (authResult && !authResult.error) {
            this.oauthToken = authResult.access_token;
            this.createPicker();
            this.log('handleAuthResult', authResult);
        }
    }
    /**
     * @private
     * @return {?}
     */
    createPicker() {
        if (this.pickerApiLoaded && this.oauthToken) {
            /** @type {?} */
            var origin = window.location.protocol + '//' + window.location.host;
            this.log(`createPicker origin '${origin}'`);
            /** @type {?} */
            var view = new google.picker.View(google.picker.ViewId.DOCS);
            view.setMimeTypes('image/png,image/jpeg,image/jpg');
            /** @type {?} */
            var picker = new google.picker.PickerBuilder()
                .enableFeature(google.picker.Feature.NAV_HIDDEN)
                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                .setAppId(this.config.appId)
                .setOAuthToken(this.oauthToken)
                .setOrigin(origin)
                .addView(view)
                .addView(new google.picker.DocsUploadView())
                // .setDeveloperKey(developerKey)
                .setCallback(this.pickerCallback)
                .build();
            picker.setVisible(true);
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    pickerCallback(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (data.action == google.picker.Action.PICKED) {
                /** @type {?} */
                const doc = data.docs[0];
                /** @type {?} */
                const fileId = doc.id;
                /** @type {?} */
                const accessToken = gapi.auth.getToken().access_token;
                this.log('The user selected', fileId, accessToken, doc);
                /** @type {?} */
                let file;
                yield this.getFile(fileId, accessToken).pipe(take(1))
                    .forEach((/**
                 * @param {?} blob
                 * @return {?}
                 */
                (blob) => {
                    file = new File([blob], doc.name, { type: blob.type });
                    this.file$.next(file);
                }));
            }
        });
    }
    /**
     * @private
     * @param {?} fileId
     * @param {?} accessToken
     * @return {?}
     */
    getFile(fileId, accessToken) {
        /** @type {?} */
        const url = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;
        return this.http.get(url, {
            headers: new HttpHeaders({
                'Authorization': `Bearer ${accessToken}`
            }),
            responseType: 'blob'
        });
    }
}
GoogleDriveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GoogleDriveService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    GoogleDriveService.prototype.isDevMode;
    /** @type {?} */
    GoogleDriveService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    GoogleDriveService.prototype.file$;
    /** @type {?} */
    GoogleDriveService.prototype.selectedFile;
    /** @type {?} */
    GoogleDriveService.prototype.pickerApiLoaded;
    /** @type {?} */
    GoogleDriveService.prototype.oauthToken;
    /** @type {?} */
    GoogleDriveService.prototype.googleApiUrl;
    /** @type {?} */
    GoogleDriveService.prototype.googleApiLoaded;
    /** @type {?} */
    GoogleDriveService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    GoogleDriveService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,