(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('@angular/forms'), require('@angular/common'), require('@angular/material'), require('@angular/material/icon')) :
    typeof define === 'function' && define.amd ? define('ng-input-file', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', '@angular/forms', '@angular/common', '@angular/material', '@angular/material/icon'], factory) :
    (global = global || self, factory(global['ng-input-file'] = {}, global.ng.core, global.ng.common.http, global.rxjs, global.rxjs.operators, global.ng.forms, global.ng.common, global.ng.material, global.ng.material.icon));
}(this, function (exports, core, http, rxjs, operators, forms, common, material, icon) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [0, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var GOOGLE_API_URL = 'https://apis.google.com/js/api.js?onload=loadPicker';
    /** @type {?} */
    var SCOPE = ['https://www.googleapis.com/auth/drive'];
    var GoogleDriveService = /** @class */ (function () {
        function GoogleDriveService(http) {
            var _this = this;
            this.http = http;
            this.isDevMode = core.isDevMode();
            this.file$ = new rxjs.Subject();
            this.selectedFile = this.file$.asObservable();
            this.pickerApiLoaded = false;
            this.googleApiUrl = GOOGLE_API_URL;
            this.googleApiLoaded = false;
            this.log = (/**
             * @param {?=} s
             * @param {...?} optional
             * @return {?}
             */
            function (s) {
                var optional = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    optional[_i - 1] = arguments[_i];
                }
                return s && _this.isDevMode && console.log(s, optional);
            });
            this.log("'google-drive.service'");
            this.onAuthApiLoad = this.onAuthApiLoad.bind(this);
            this.onPickerApiLoad = this.onPickerApiLoad.bind(this);
            this.handleAuthResult = this.handleAuthResult.bind(this);
            this.pickerCallback = this.pickerCallback.bind(this);
        }
        /**
         * @return {?}
         */
        GoogleDriveService.prototype.setDevMode = /**
         * @return {?}
         */
        function () { this.isDevMode = true; };
        /**
         * @return {?}
         */
        GoogleDriveService.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} config
         * @return {?}
         */
        GoogleDriveService.prototype.init = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            this.config = config;
        };
        /**
         * @return {?}
         */
        GoogleDriveService.prototype.loadScript = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.config)
                return;
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) {
                if (_this.googleApiLoaded) {
                    resolve('already loaded');
                    return;
                }
                /** @type {?} */
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = _this.googleApiUrl;
                script.onload = (/**
                 * @return {?}
                 */
                function () {
                    _this.googleApiLoaded = true;
                    resolve('loaded');
                });
                script.onerror = ((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return resolve('failed to load'); }));
                document.getElementsByTagName('head')[0].appendChild(script);
            }));
        };
        /**
         * @return {?}
         */
        GoogleDriveService.prototype.loadPicker = /**
         * @return {?}
         */
        function () {
            if (!this.config)
                return;
            this.pickerApiLoaded = false;
            this.oauthToken = null;
            this.doLoadPicker();
        };
        /**
         * @private
         * @return {?}
         */
        GoogleDriveService.prototype.doLoadPicker = /**
         * @private
         * @return {?}
         */
        function () {
            gapi.load('auth', { 'callback': this.onAuthApiLoad });
            gapi.load('picker', { 'callback': this.onPickerApiLoad });
        };
        /**
         * @private
         * @return {?}
         */
        GoogleDriveService.prototype.onAuthApiLoad = /**
         * @private
         * @return {?}
         */
        function () {
            gapi.auth.authorize({
                'client_id': this.config.clientId,
                'scope': SCOPE,
                'immediate': false
            }, this.handleAuthResult);
        };
        /**
         * @private
         * @return {?}
         */
        GoogleDriveService.prototype.onPickerApiLoad = /**
         * @private
         * @return {?}
         */
        function () {
            this.pickerApiLoaded = true;
            this.createPicker();
        };
        /**
         * @private
         * @param {?} authResult
         * @return {?}
         */
        GoogleDriveService.prototype.handleAuthResult = /**
         * @private
         * @param {?} authResult
         * @return {?}
         */
        function (authResult) {
            if (authResult && !authResult.error) {
                this.oauthToken = authResult.access_token;
                this.createPicker();
                this.log('handleAuthResult', authResult);
            }
        };
        /**
         * @private
         * @return {?}
         */
        GoogleDriveService.prototype.createPicker = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.pickerApiLoaded && this.oauthToken) {
                /** @type {?} */
                var origin = window.location.protocol + '//' + window.location.host;
                this.log("createPicker origin '" + origin + "'");
                /** @type {?} */
                var view = new google.picker.View(google.picker.ViewId.DOCS);
                view.setMimeTypes('image/png,image/jpeg,image/jpg');
                /** @type {?} */
                var picker = new google.picker.PickerBuilder()
                    .enableFeature(google.picker.Feature.NAV_HIDDEN)
                    .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                    .setAppId(this.config.appId)
                    .setOAuthToken(this.oauthToken)
                    .setOrigin(origin)
                    .addView(view)
                    .addView(new google.picker.DocsUploadView())
                    // .setDeveloperKey(developerKey)
                    .setCallback(this.pickerCallback)
                    .build();
                picker.setVisible(true);
            }
        };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        GoogleDriveService.prototype.pickerCallback = /**
         * @private
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return __awaiter(this, void 0, void 0, function () {
                var doc_1, fileId, accessToken, file_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(data.action == google.picker.Action.PICKED)) return [3 /*break*/, 2];
                            doc_1 = data.docs[0];
                            fileId = doc_1.id;
                            accessToken = gapi.auth.getToken().access_token;
                            this.log('The user selected', fileId, accessToken, doc_1);
                            return [4 /*yield*/, this.getFile(fileId, accessToken).pipe(operators.take(1))
                                    .forEach((/**
                                 * @param {?} blob
                                 * @return {?}
                                 */
                                function (blob) {
                                    file_1 = new File([blob], doc_1.name, { type: blob.type });
                                    _this.file$.next(file_1);
                                }))];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @private
         * @param {?} fileId
         * @param {?} accessToken
         * @return {?}
         */
        GoogleDriveService.prototype.getFile = /**
         * @private
         * @param {?} fileId
         * @param {?} accessToken
         * @return {?}
         */
        function (fileId, accessToken) {
            /** @type {?} */
            var url = "https://www.googleapis.com/drive/v3/files/" + fileId + "?alt=media";
            return this.http.get(url, {
                headers: new http.HttpHeaders({
                    'Authorization': "Bearer " + accessToken
                }),
                responseType: 'blob'
            });
        };
        GoogleDriveService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GoogleDriveService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return GoogleDriveService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NO_FILE = '';
    /** @type {?} */
    var ACCEPT_DEFAULT = 'image/*, video/*';
    var NgInputFileComponent = /** @class */ (function () {
        function NgInputFileComponent(service) {
            var _this = this;
            this.service = service;
            this.file = new forms.FormControl({ value: NO_FILE, disabled: true });
            this.accept = ACCEPT_DEFAULT;
            this.files = new core.EventEmitter();
            this.service.selectedFile.subscribe((/**
             * @param {?} file
             * @return {?}
             */
            function (file) { return _this.googleFileChanged(file); }));
            this.drop = this.drop.bind(this);
            this.fileDropped = this.fileDropped.bind(this);
        }
        Object.defineProperty(NgInputFileComponent.prototype, "filename", {
            get: /**
             * @return {?}
             */
            function () { return this.file.value; },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) { this.file.setValue(value); },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgInputFileComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (this.dropbox) {
                this.dropbox.addEventListener('dragenter', this.dragenter, false);
                this.dropbox.addEventListener('dragover', this.dragover, false);
                this.dropbox.addEventListener('drop', this.drop, false);
            }
            this.service.log('NgInputFileComponent', this.dropbox);
        };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        NgInputFileComponent.prototype.dragenter = /**
         * @private
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            e.preventDefault();
        };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        NgInputFileComponent.prototype.dragover = /**
         * @private
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            e.preventDefault();
        };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        NgInputFileComponent.prototype.drop = /**
         * @private
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            e.preventDefault();
            /** @type {?} */
            var dt = e.dataTransfer;
            /** @type {?} */
            var files = dt.files;
            this.fileDropped(files);
        };
        /**
         * @private
         * @param {?} files
         * @return {?}
         */
        NgInputFileComponent.prototype.fileDropped = /**
         * @private
         * @param {?} files
         * @return {?}
         */
        function (files) {
            if (!files || files.length === 0)
                return;
            /** @type {?} */
            var file = files.item(0);
            this.service.log("fileDropped '" + file.name + "'", file);
            if (this.filename === file.name)
                return;
            // got new file drag-and-dropped from local device
            this.filename = file.name;
            this.googleFile = null;
            this.emitFiles(files);
        };
        /**
         * @return {?}
         */
        NgInputFileComponent.prototype.fileChanged = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var filename = NO_FILE;
            if (this.getFiles().length > 0) {
                /** @type {?} */
                var file = this.getFiles().item(0);
                if (file)
                    filename = file.name;
            }
            if (this.filename === filename)
                return;
            // got new file chosen from local device
            this.filename = filename;
            this.googleFile = null;
            this.emitFiles();
        };
        /**
         * @param {?} file
         * @return {?}
         */
        NgInputFileComponent.prototype.googleFileChanged = /**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            this.service.log("googleFileChanged '" + file.name + "'", file);
            if (this.googleFile &&
                this.googleFile.name === file.name &&
                this.googleFile.size === file.size)
                return;
            // got new file from google drive
            this.filename = file.name;
            this.googleFile = file;
            this.emitFiles();
        };
        /**
         * @return {?}
         */
        NgInputFileComponent.prototype.googleDrivePick = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.service.loadScript()
                .then((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.service.loadPicker(); }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return console.error('googleDrivePick', error); }));
        };
        /**
         * @return {?}
         */
        NgInputFileComponent.prototype.clear = /**
         * @return {?}
         */
        function () {
            this.getFileInput().value = NO_FILE;
            this.googleFile = null;
            this.filename = NO_FILE;
        };
        /**
         * @return {?}
         */
        NgInputFileComponent.prototype.remove = /**
         * @return {?}
         */
        function () {
            this.clear();
            this.emitFiles();
        };
        /**
         * @private
         * @param {?=} droppedFiles
         * @return {?}
         */
        NgInputFileComponent.prototype.emitFiles = /**
         * @private
         * @param {?=} droppedFiles
         * @return {?}
         */
        function (droppedFiles) {
            /** @type {?} */
            var files = droppedFiles || (this.googleFile ? [this.googleFile] : this.getFiles());
            this.files.emit({ files: files });
        };
        /**
         * @private
         * @return {?}
         */
        NgInputFileComponent.prototype.getFileInput = /**
         * @private
         * @return {?}
         */
        function () {
            return this.inputEl.nativeElement;
        };
        /**
         * @private
         * @return {?}
         */
        NgInputFileComponent.prototype.getFiles = /**
         * @private
         * @return {?}
         */
        function () {
            return this.getFileInput().files;
        };
        NgInputFileComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'input-file',
                        template: "\n<div class=\"box\">\n  <div class=\"input-file\" style=\"width:93%\">\n    <mat-form-field style=\"width:100%\" (click)=\"inputEl.click()\">\n      <i matPrefix>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z\"/><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/></svg>\n      </i>\n      <input matInput placeholder=\"Choose file\" [formControl]=\"file\">\n    </mat-form-field>\n    <input type=\"file\" [attr.accept]=\"accept\" (change)=\"fileChanged()\" #inputEl>\n  </div>\n  <i class=\"icon\" *ngIf=\"service.config\" (click)=\"googleDrivePick()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 48 48\" version=\"1.1\" width=\"24px\" height=\"24px\"><g id=\"surface1\"><path style=\" fill:#FFC107;\" d=\"M 17 6 L 31 6 L 45 30 L 31 30 Z \"/><path style=\" fill:#1976D2;\" d=\"M 9.875 42 L 16.9375 30 L 45 30 L 38 42 Z \"/><path style=\" fill:#4CAF50;\" d=\"M 3 30.125 L 9.875 42 L 24 18 L 17 6 Z \"/></g></svg>\n  </i>\n  <i class=\"icon\" *ngIf=\"filename\" (click)=\"remove()\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4z\"/><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/></svg>\n  </i>\n</div>\n  ",
                        styles: ["\n.box {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\nmat-form-field, i.icon {\n  cursor: pointer;\n}\ninput[type=file] {\n  display: none;\n}\ni[matPrefix] {\n  padding-right: 5px;\n}\ni.icon {\n  padding-bottom: 12px;\n}\n  "]
                    }] }
        ];
        /** @nocollapse */
        NgInputFileComponent.ctorParameters = function () { return [
            { type: GoogleDriveService }
        ]; };
        NgInputFileComponent.propDecorators = {
            accept: [{ type: core.Input }],
            files: [{ type: core.Output }],
            inputEl: [{ type: core.ViewChild, args: ['inputEl',] }],
            dropbox: [{ type: core.Input }]
        };
        return NgInputFileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgInputFileModule = /** @class */ (function () {
        function NgInputFileModule() {
        }
        NgInputFileModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            forms.ReactiveFormsModule,
                            material.MatButtonModule,
                            material.MatInputModule,
                            icon.MatIconModule,
                        ],
                        providers: [GoogleDriveService],
                        declarations: [NgInputFileComponent],
                        exports: [NgInputFileComponent]
                    },] }
        ];
        return NgInputFileModule;
    }());

    exports.GoogleDriveService = GoogleDriveService;
    exports.NgInputFileComponent = NgInputFileComponent;
    exports.NgInputFileModule = NgInputFileModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-input-file.umd.js.map
