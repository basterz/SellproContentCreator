import { __awaiter } from 'tslib';
import { isDevMode, Injectable, EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';
import { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatButtonModule, MatInputModule } from '@angular/material';
import { MatIconModule } from '@angular/material/icon';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const GOOGLE_API_URL = 'https://apis.google.com/js/api.js?onload=loadPicker';
/** @type {?} */
const SCOPE = ['https://www.googleapis.com/auth/drive'];
class GoogleDriveService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.isDevMode = isDevMode();
        this.file$ = new Subject();
        this.selectedFile = this.file$.asObservable();
        this.pickerApiLoaded = false;
        this.googleApiUrl = GOOGLE_API_URL;
        this.googleApiLoaded = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        (s, ...optional) => s && this.isDevMode && console.log(s, optional));
        this.log(`'google-drive.service'`);
        this.onAuthApiLoad = this.onAuthApiLoad.bind(this);
        this.onPickerApiLoad = this.onPickerApiLoad.bind(this);
        this.handleAuthResult = this.handleAuthResult.bind(this);
        this.pickerCallback = this.pickerCallback.bind(this);
    }
    /**
     * @return {?}
     */
    setDevMode() { this.isDevMode = true; }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    init(config) {
        this.config = config;
    }
    /**
     * @return {?}
     */
    loadScript() {
        if (!this.config)
            return;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (this.googleApiLoaded) {
                resolve('already loaded');
                return;
            }
            /** @type {?} */
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = this.googleApiUrl;
            script.onload = (/**
             * @return {?}
             */
            () => {
                this.googleApiLoaded = true;
                resolve('loaded');
            });
            script.onerror = ((/**
             * @param {?} error
             * @return {?}
             */
            error => resolve('failed to load')));
            document.getElementsByTagName('head')[0].appendChild(script);
        }));
    }
    /**
     * @return {?}
     */
    loadPicker() {
        if (!this.config)
            return;
        this.pickerApiLoaded = false;
        this.oauthToken = null;
        this.doLoadPicker();
    }
    /**
     * @private
     * @return {?}
     */
    doLoadPicker() {
        gapi.load('auth', { 'callback': this.onAuthApiLoad });
        gapi.load('picker', { 'callback': this.onPickerApiLoad });
    }
    /**
     * @private
     * @return {?}
     */
    onAuthApiLoad() {
        gapi.auth.authorize({
            'client_id': this.config.clientId,
            'scope': SCOPE,
            'immediate': false
        }, this.handleAuthResult);
    }
    /**
     * @private
     * @return {?}
     */
    onPickerApiLoad() {
        this.pickerApiLoaded = true;
        this.createPicker();
    }
    /**
     * @private
     * @param {?} authResult
     * @return {?}
     */
    handleAuthResult(authResult) {
        if (authResult && !authResult.error) {
            this.oauthToken = authResult.access_token;
            this.createPicker();
            this.log('handleAuthResult', authResult);
        }
    }
    /**
     * @private
     * @return {?}
     */
    createPicker() {
        if (this.pickerApiLoaded && this.oauthToken) {
            /** @type {?} */
            var origin = window.location.protocol + '//' + window.location.host;
            this.log(`createPicker origin '${origin}'`);
            /** @type {?} */
            var view = new google.picker.View(google.picker.ViewId.DOCS);
            view.setMimeTypes('image/png,image/jpeg,image/jpg');
            /** @type {?} */
            var picker = new google.picker.PickerBuilder()
                .enableFeature(google.picker.Feature.NAV_HIDDEN)
                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                .setAppId(this.config.appId)
                .setOAuthToken(this.oauthToken)
                .setOrigin(origin)
                .addView(view)
                .addView(new google.picker.DocsUploadView())
                // .setDeveloperKey(developerKey)
                .setCallback(this.pickerCallback)
                .build();
            picker.setVisible(true);
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    pickerCallback(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (data.action == google.picker.Action.PICKED) {
                /** @type {?} */
                const doc = data.docs[0];
                /** @type {?} */
                const fileId = doc.id;
                /** @type {?} */
                const accessToken = gapi.auth.getToken().access_token;
                this.log('The user selected', fileId, accessToken, doc);
                /** @type {?} */
                let file;
                yield this.getFile(fileId, accessToken).pipe(take(1))
                    .forEach((/**
                 * @param {?} blob
                 * @return {?}
                 */
                (blob) => {
                    file = new File([blob], doc.name, { type: blob.type });
                    this.file$.next(file);
                }));
            }
        });
    }
    /**
     * @private
     * @param {?} fileId
     * @param {?} accessToken
     * @return {?}
     */
    getFile(fileId, accessToken) {
        /** @type {?} */
        const url = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;
        return this.http.get(url, {
            headers: new HttpHeaders({
                'Authorization': `Bearer ${accessToken}`
            }),
            responseType: 'blob'
        });
    }
}
GoogleDriveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GoogleDriveService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NO_FILE = '';
/** @type {?} */
const ACCEPT_DEFAULT = 'image/*, video/*';
class NgInputFileComponent {
    // nativeElement
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.file = new FormControl({ value: NO_FILE, disabled: true });
        this.accept = ACCEPT_DEFAULT;
        this.files = new EventEmitter();
        this.service.selectedFile.subscribe((/**
         * @param {?} file
         * @return {?}
         */
        file => this.googleFileChanged(file)));
        this.drop = this.drop.bind(this);
        this.fileDropped = this.fileDropped.bind(this);
    }
    /**
     * @return {?}
     */
    get filename() { return this.file.value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set filename(value) { this.file.setValue(value); }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dropbox) {
            this.dropbox.addEventListener('dragenter', this.dragenter, false);
            this.dropbox.addEventListener('dragover', this.dragover, false);
            this.dropbox.addEventListener('drop', this.drop, false);
        }
        this.service.log('NgInputFileComponent', this.dropbox);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    dragenter(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    dragover(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    drop(e) {
        e.stopPropagation();
        e.preventDefault();
        /** @type {?} */
        var dt = e.dataTransfer;
        /** @type {?} */
        var files = dt.files;
        this.fileDropped(files);
    }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    fileDropped(files) {
        if (!files || files.length === 0)
            return;
        /** @type {?} */
        const file = files.item(0);
        this.service.log(`fileDropped '${file.name}'`, file);
        if (this.filename === file.name)
            return;
        // got new file drag-and-dropped from local device
        this.filename = file.name;
        this.googleFile = null;
        this.emitFiles(files);
    }
    /**
     * @return {?}
     */
    fileChanged() {
        /** @type {?} */
        let filename = NO_FILE;
        if (this.getFiles().length > 0) {
            /** @type {?} */
            const file = this.getFiles().item(0);
            if (file)
                filename = file.name;
        }
        if (this.filename === filename)
            return;
        // got new file chosen from local device
        this.filename = filename;
        this.googleFile = null;
        this.emitFiles();
    }
    /**
     * @param {?} file
     * @return {?}
     */
    googleFileChanged(file) {
        this.service.log(`googleFileChanged '${file.name}'`, file);
        if (this.googleFile &&
            this.googleFile.name === file.name &&
            this.googleFile.size === file.size)
            return;
        // got new file from google drive
        this.filename = file.name;
        this.googleFile = file;
        this.emitFiles();
    }
    /**
     * @return {?}
     */
    googleDrivePick() {
        this.service.loadScript()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => this.service.loadPicker()))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => console.error('googleDrivePick', error)));
    }
    /**
     * @return {?}
     */
    clear() {
        this.getFileInput().value = NO_FILE;
        this.googleFile = null;
        this.filename = NO_FILE;
    }
    /**
     * @return {?}
     */
    remove() {
        this.clear();
        this.emitFiles();
    }
    /**
     * @private
     * @param {?=} droppedFiles
     * @return {?}
     */
    emitFiles(droppedFiles) {
        /** @type {?} */
        const files = droppedFiles || (this.googleFile ? [this.googleFile] : this.getFiles());
        this.files.emit({ files: files });
    }
    /**
     * @private
     * @return {?}
     */
    getFileInput() {
        return this.inputEl.nativeElement;
    }
    /**
     * @private
     * @return {?}
     */
    getFiles() {
        return this.getFileInput().files;
    }
}
NgInputFileComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-file',
                template: `
<div class="box">
  <div class="input-file" style="width:93%">
    <mat-form-field style="width:100%" (click)="inputEl.click()">
      <i matPrefix>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"/><path fill="none" d="M0 0h24v24H0V0z"/></svg>
      </i>
      <input matInput placeholder="Choose file" [formControl]="file">
    </mat-form-field>
    <input type="file" [attr.accept]="accept" (change)="fileChanged()" #inputEl>
  </div>
  <i class="icon" *ngIf="service.config" (click)="googleDrivePick()">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 48 48" version="1.1" width="24px" height="24px"><g id="surface1"><path style=" fill:#FFC107;" d="M 17 6 L 31 6 L 45 30 L 31 30 Z "/><path style=" fill:#1976D2;" d="M 9.875 42 L 16.9375 30 L 45 30 L 38 42 Z "/><path style=" fill:#4CAF50;" d="M 3 30.125 L 9.875 42 L 24 18 L 17 6 Z "/></g></svg>
  </i>
  <i class="icon" *ngIf="filename" (click)="remove()">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM8 9h8v10H8V9zm7.5-5l-1-1h-5l-1 1H5v2h14V4z"/><path fill="none" d="M0 0h24v24H0V0z"/></svg>
  </i>
</div>
  `,
                styles: [`
.box {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
mat-form-field, i.icon {
  cursor: pointer;
}
input[type=file] {
  display: none;
}
i[matPrefix] {
  padding-right: 5px;
}
i.icon {
  padding-bottom: 12px;
}
  `]
            }] }
];
/** @nocollapse */
NgInputFileComponent.ctorParameters = () => [
    { type: GoogleDriveService }
];
NgInputFileComponent.propDecorators = {
    accept: [{ type: Input }],
    files: [{ type: Output }],
    inputEl: [{ type: ViewChild, args: ['inputEl',] }],
    dropbox: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgInputFileModule {
}
NgInputFileModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    ReactiveFormsModule,
                    MatButtonModule,
                    MatInputModule,
                    MatIconModule,
                ],
                providers: [GoogleDriveService],
                declarations: [NgInputFileComponent],
                exports: [NgInputFileComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { GoogleDriveService, NgInputFileComponent, NgInputFileModule };
//# sourceMappingURL=ng-input-file.js.map
