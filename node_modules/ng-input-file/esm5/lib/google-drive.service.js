/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, isDevMode } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
/**
 * @record
 */
export function GoogleApiConfig() { }
if (false) {
    /** @type {?} */
    GoogleApiConfig.prototype.developerKey;
    /** @type {?} */
    GoogleApiConfig.prototype.appId;
    /** @type {?} */
    GoogleApiConfig.prototype.clientId;
}
/** @type {?} */
var GOOGLE_API_URL = 'https://apis.google.com/js/api.js?onload=loadPicker';
/** @type {?} */
var SCOPE = ['https://www.googleapis.com/auth/drive'];
var GoogleDriveService = /** @class */ (function () {
    function GoogleDriveService(http) {
        var _this = this;
        this.http = http;
        this.isDevMode = isDevMode();
        this.file$ = new Subject();
        this.selectedFile = this.file$.asObservable();
        this.pickerApiLoaded = false;
        this.googleApiUrl = GOOGLE_API_URL;
        this.googleApiLoaded = false;
        this.log = (/**
         * @param {?=} s
         * @param {...?} optional
         * @return {?}
         */
        function (s) {
            var optional = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optional[_i - 1] = arguments[_i];
            }
            return s && _this.isDevMode && console.log(s, optional);
        });
        this.log("'google-drive.service'");
        this.onAuthApiLoad = this.onAuthApiLoad.bind(this);
        this.onPickerApiLoad = this.onPickerApiLoad.bind(this);
        this.handleAuthResult = this.handleAuthResult.bind(this);
        this.pickerCallback = this.pickerCallback.bind(this);
    }
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.setDevMode = /**
     * @return {?}
     */
    function () { this.isDevMode = true; };
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} config
     * @return {?}
     */
    GoogleDriveService.prototype.init = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.config = config;
    };
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.config)
            return;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            if (_this.googleApiLoaded) {
                resolve('already loaded');
                return;
            }
            /** @type {?} */
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = _this.googleApiUrl;
            script.onload = (/**
             * @return {?}
             */
            function () {
                _this.googleApiLoaded = true;
                resolve('loaded');
            });
            script.onerror = ((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return resolve('failed to load'); }));
            document.getElementsByTagName('head')[0].appendChild(script);
        }));
    };
    /**
     * @return {?}
     */
    GoogleDriveService.prototype.loadPicker = /**
     * @return {?}
     */
    function () {
        if (!this.config)
            return;
        this.pickerApiLoaded = false;
        this.oauthToken = null;
        this.doLoadPicker();
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.doLoadPicker = /**
     * @private
     * @return {?}
     */
    function () {
        gapi.load('auth', { 'callback': this.onAuthApiLoad });
        gapi.load('picker', { 'callback': this.onPickerApiLoad });
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.onAuthApiLoad = /**
     * @private
     * @return {?}
     */
    function () {
        gapi.auth.authorize({
            'client_id': this.config.clientId,
            'scope': SCOPE,
            'immediate': false
        }, this.handleAuthResult);
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.onPickerApiLoad = /**
     * @private
     * @return {?}
     */
    function () {
        this.pickerApiLoaded = true;
        this.createPicker();
    };
    /**
     * @private
     * @param {?} authResult
     * @return {?}
     */
    GoogleDriveService.prototype.handleAuthResult = /**
     * @private
     * @param {?} authResult
     * @return {?}
     */
    function (authResult) {
        if (authResult && !authResult.error) {
            this.oauthToken = authResult.access_token;
            this.createPicker();
            this.log('handleAuthResult', authResult);
        }
    };
    /**
     * @private
     * @return {?}
     */
    GoogleDriveService.prototype.createPicker = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.pickerApiLoaded && this.oauthToken) {
            /** @type {?} */
            var origin = window.location.protocol + '//' + window.location.host;
            this.log("createPicker origin '" + origin + "'");
            /** @type {?} */
            var view = new google.picker.View(google.picker.ViewId.DOCS);
            view.setMimeTypes('image/png,image/jpeg,image/jpg');
            /** @type {?} */
            var picker = new google.picker.PickerBuilder()
                .enableFeature(google.picker.Feature.NAV_HIDDEN)
                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                .setAppId(this.config.appId)
                .setOAuthToken(this.oauthToken)
                .setOrigin(origin)
                .addView(view)
                .addView(new google.picker.DocsUploadView())
                // .setDeveloperKey(developerKey)
                .setCallback(this.pickerCallback)
                .build();
            picker.setVisible(true);
        }
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    GoogleDriveService.prototype.pickerCallback = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var doc_1, fileId, accessToken, file_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(data.action == google.picker.Action.PICKED)) return [3 /*break*/, 2];
                        doc_1 = data.docs[0];
                        fileId = doc_1.id;
                        accessToken = gapi.auth.getToken().access_token;
                        this.log('The user selected', fileId, accessToken, doc_1);
                        return [4 /*yield*/, this.getFile(fileId, accessToken).pipe(take(1))
                                .forEach((/**
                             * @param {?} blob
                             * @return {?}
                             */
                            function (blob) {
                                file_1 = new File([blob], doc_1.name, { type: blob.type });
                                _this.file$.next(file_1);
                            }))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} fileId
     * @param {?} accessToken
     * @return {?}
     */
    GoogleDriveService.prototype.getFile = /**
     * @private
     * @param {?} fileId
     * @param {?} accessToken
     * @return {?}
     */
    function (fileId, accessToken) {
        /** @type {?} */
        var url = "https://www.googleapis.com/drive/v3/files/" + fileId + "?alt=media";
        return this.http.get(url, {
            headers: new HttpHeaders({
                'Authorization': "Bearer " + accessToken
            }),
            responseType: 'blob'
        });
    };
    GoogleDriveService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GoogleDriveService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return GoogleDriveService;
}());
export { GoogleDriveService };
if (false) {
    /** @type {?} */
    GoogleDriveService.prototype.isDevMode;
    /** @type {?} */
    GoogleDriveService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    GoogleDriveService.prototype.file$;
    /** @type {?} */
    GoogleDriveService.prototype.selectedFile;
    /** @type {?} */
    GoogleDriveService.prototype.pickerApiLoaded;
    /** @type {?} */
    GoogleDriveService.prototype.oauthToken;
    /** @type {?} */
    GoogleDriveService.prototype.googleApiUrl;
    /** @type {?} */
    GoogleDriveService.prototype.googleApiLoaded;
    /** @type {?} */
    GoogleDriveService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    GoogleDriveService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,